{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/Pause.js","src/TiledLevel.js","src/config.js","src/enemy.js","src/levels/Level1.js","src/main.js","src/player.js","src/stages/Boot.js","src/stages/MainMenu.js","src/stages/PlayerSelection.js","src/stages/Preloader.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrlGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"build.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\r\nmodule.exports = {\r\n\r\n\r\n    unpause: function(game){\r\n        // Only act if paused\r\n        if(game.paused){\r\n            game.paused = false;\r\n        }\r\n    },\r\n\r\n    pause : function(game){\r\n        if(!game.paused) {\r\n            game.paused = true;\r\n            var menu = game.add.graphics(0, 0);\r\n            menu.inputEnabled = true;\r\n            menu.beginFill(0x000000, 1);\r\n            menu.bounds = new PIXI.Rectangle(0, 0, 300, 200);\r\n            menu.drawRect(0, 0, 300, 200);\r\n            return menu;\r\n        } else {\r\n            this.unpause(game);\r\n        }\r\n\r\n    }\r\n\r\n};","/* global Phaser */\r\n/* global _ */\r\n/* global PIXI */\r\n\r\nvar OBSTACLE_TILE = 17;\r\nvar PLATFORM_TILE = 18;\r\n\r\nfunction TiledLevel(game, name) {\r\n  this.game = game;\r\n  this.tilemap = this.game.add.tilemap(name);\r\n  \r\n  this.tilemap.addTilesetImage('tileset', 'tiles');\r\n  this.tilemap.addTilesetImage('tiles-props', 'tiles-props');\r\n  \r\n  this.backgroundSprite = this.game.add.sprite(0, -100, 'background');\r\n  this.backgroundSprite.fixedToCamera = true;\r\n  this.backgroundSprite.scale = new PIXI.Point(0.5, 0.5);\r\n  \r\n  this.obstaclesLayer = this.tilemap.createLayer('tileset');\r\n  this.obstaclesLayer.resizeWorld();\r\n  \r\n  this.propsLayer = this.tilemap.createLayer('tileset properties');\r\n  // comment below to see tiles properties\r\n  this.propsLayer.visible = false;\r\n  \r\n  this.tilemap.setLayer(this.propsLayer);\r\n  \r\n  this.levelStart = _.find(this.tilemap.objects.objects, function(obj) { return obj.name === 'start' });\r\n  var endObject = _.find(this.tilemap.objects.objects, function(obj) { return obj.name === 'end' });\r\n  this.levelEnd = game.add.sprite(endObject.x, endObject.y);\r\n  game.physics.arcade.enable(this.levelEnd);\r\n  this.levelEnd.anchor.y = 1;\r\n  this.levelEnd.enableBody = true;\r\n  this.levelEnd.body.immovable = true;\r\n  \r\n  var layer = this.propsLayer.layer;\r\n  for (var y = 0; y < layer.height; y++) {\r\n    for (var x = 0; x < layer.width; x++) {\r\n      var tile = layer.data[y][x];\r\n\r\n      if (tile && tile.index === PLATFORM_TILE) {\r\n        tile.setCollision(false, false, true, false);\r\n      }\r\n    }\r\n  }\r\n  \r\n  this.tilemap.setCollisionByIndex(OBSTACLE_TILE);\r\n}\r\n\r\nmodule.exports = TiledLevel;","module.exports =\r\n{\r\n    images : {\r\n        PLAYER      : 'player',\r\n        ENEMY       : 'swinia',\r\n        SKY         : 'sky',\r\n        GROUND      : 'ground',\r\n        STAR        : 'star',\r\n        PROJECTILE  : 'projectile',\r\n        PLAYER_1    : 'player_1',\r\n        PLAYER_2    : 'player_2',\r\n        PLAYER_3    : 'player_3',\r\n        PLAYER_4    : 'player_4',\r\n        PLAYER_1_AV : 'player_1av',\r\n        PLAYER_2_AV : 'player_2av',\r\n        PLAYER_3_AV : 'player_3av',\r\n        PLAYER_4_AV : 'player_4av'\r\n    },\r\n    directions : {\r\n       LEFT :       0,\r\n       RIGHT :      1\r\n    },\r\n    gameSize: {\r\n        width: 640,\r\n        height: 960\r\n    }\r\n};\r\n\r\n \r\n","var IMAGES = require('./config').images;\r\n\r\nvar enemySprite;\r\nvar right = true;\r\n\r\nexports.create = function(game) {\r\n    // The enemySprite and its settings\r\n    enemySprite = game.add.sprite(60, 60, IMAGES.ENEMY);\r\n\r\n    //  We need to enable physics on the enemySprite\r\n    game.physics.arcade.enable(enemySprite);\r\n\r\n    //game.camera.follow(enemySprite);\r\n\r\n    //  enemySprite physics properties. Give the little guy a slight bounce.\r\n    enemySprite.body.bounce.y = 0.1;\r\n    enemySprite.body.gravity.y = 350;\r\n    enemySprite.body.collideWorldBounds = true;\r\n\r\n    //  Our two animations, walking left and right.\r\n    enemySprite.animations.add('left', [0, 1, 2, 3], 10, true);\r\n    enemySprite.animations.add('right', [4, 5, 6, 7], 10, true);\r\n\r\n};\r\n\r\nexports.getSprite = function() {\r\n    return enemySprite;\r\n}\r\n\r\nexports.updateMovement = function() {\r\n\tif (enemySprite.body.blocked.right)\r\n\t{\r\n\t\tright = false;\r\n\t}\r\n\telse if (enemySprite.body.blocked.left)\r\n\t{\r\n\t\tright = true;\r\n\t}\r\n\t\r\n    if (right)\r\n    {\r\n        enemySprite.body.velocity.x = 100;\r\n\t\tenemySprite.animations.play('right');\r\n    } \r\n    else \r\n    {\r\n        enemySprite.body.velocity.x = -100;\r\n\t\tenemySprite.animations.play('left');\r\n    } \r\n}","/* global _ */\r\n/* global PIXI */\r\n/* global Phaser */\r\nvar IMAGES = require('./../config').images;\r\nvar Player = require('./../player');\r\nvar TiledLevel = require('./../TiledLevel');\r\nvar enemy = require('./../enemy');\r\nvar pauseUtils = require('./../Pause');\r\n\r\nfunction Level1(game) {\r\n\tthis._player = null;\r\n\tthis._platformsGroup = null;\r\n  this._obstaclesLayer = null;\r\n}\r\n\r\nLevel1.prototype = {\r\n  create: function() {\r\n    this.physics.startSystem(Phaser.Physics.ARCADE);\r\n    this.tiledMap = new TiledLevel(this.game, 'level1');\r\n    \r\n    // window.player for debugging purpose\r\n    window.player = this._player = new Player(this, this.tiledMap.levelStart.x, this.tiledMap.levelStart.y);\r\n    this._enemy = enemy.create(this);\r\n    \r\n    //  Finally some stars to collect\r\n    this._starsGroup = this.add.group();\r\n    //  We will enable physics for any star that is created in this group\r\n    this._starsGroup.enableBody = true;\r\n    //  Here we'll create 12 of them evenly spaced apart\r\n    for (var i = 0; i < 12; i++)\r\n    {\r\n        //  Create a star inside of the 'stars' group\r\n        var star = this._starsGroup.create(i * 70, 0, IMAGES.STAR);\r\n        //  Let gravity do its thing\r\n        star.body.gravity.y = 300;\r\n    }\r\n    //  The score\r\n    this._score = 0;\r\n    this._scoreText = this.add.text(16, 16, 'score: ' + this._score, { fontSize: '32px', fill: '#000' });\r\n    this._scoreText.fixedToCamera = true;\r\n\r\n    this._debugMode = false;\r\n\r\n    //Pause handling\r\n    var pauseKey = this.input.keyboard.addKey(Phaser.KeyCode.P);\r\n    pauseKey.onUp.add(function(){\r\n      pauseUtils.pause(this.game);\r\n    }, this);\r\n\r\n\r\n    var spaceKey = this.input.keyboard.addKey(Phaser.KeyCode.SPACEBAR);\r\n    spaceKey.onUp.add(this.toggleDebugMode, this);\r\n  },\r\n  update: function() {\r\n    var enemySprite = enemy.getSprite();\r\n    this.physics.arcade.collide(enemySprite, this.tiledMap.propsLayer);\r\n    enemy.updateMovement();\r\n    \r\n    //  Collide the player and the stars with the platforms\r\n    this.physics.arcade.collide(this._starsGroup, this.tiledMap.propsLayer);\r\n    this.physics.arcade.collide(this._player.sprite, this.tiledMap.propsLayer);\r\n    this.physics.arcade.collide(this._player.projectilesGroup, this.tiledMap.propsLayer, function(p) { p.kill(); });\r\n    this.physics.arcade.collide(this._player.sprite, this.tiledMap.levelEnd, this.endLevel, null, this);\r\n\r\n    //  Checks to see if the player overlaps with any of the stars, if he does call the collectStar function\r\n    this.physics.arcade.overlap(this._player.sprite, this._starsGroup, this.collectStar, null, this);\r\n\r\n    this._player.update();\r\n  },\r\n  collectStar: function (playerSprite, star) {\r\n    // Removes the star from the screen\r\n    star.kill();\r\n\r\n    //  Add and update the score\r\n    this._score += 10;\r\n    this._scoreText.text = 'score: ' + this._score;\r\n  },\r\n  render: function() {\r\n    if (this._debugMode) {\r\n      this.game.debug.body(this._player.sprite);\r\n      this.game.debug.text('Active Projectiles: ' + this._player.projectilesGroup.total, 32, 432); \r\n      this.game.debug.text('DEBUG MODE', 32, 464); \r\n    }\r\n  },\r\n  endLevel: function() {\r\n    console.log('level 1 end');\r\n    // TODO add level 2\r\n\t\t// this.state.start('Level2');\r\n  },\r\n  toggleDebugMode: function() {\r\n    this._debugMode = !this._debugMode;\r\n    this.tiledMap.propsLayer.visible = this._debugMode; \r\n  }\r\n}\r\n\r\nmodule.exports = Level1;","/* global Phaser */\r\nvar Boot = require('./stages/Boot'),\r\n    Preloader = require('./stages/Preloader'),\r\n    MainMenu = require('./stages/MainMenu'),\r\n    PlayerSelection = require('./stages/PlayerSelection'),\r\n    Level1 = require('./levels/Level1');\r\n\r\nvar game = new Phaser.Game(640, 480, Phaser.AUTO, 'game');\r\ngame.state.add('Boot', Boot);\r\ngame.state.add('Preloader', Preloader);\r\ngame.state.add('MainMenu', MainMenu);\r\ngame.state.add('PlayerSelection', PlayerSelection);\r\ngame.state.add('Level1', Level1);\r\ngame.state.start('Boot');\r\n","/* global Phaser */\r\n/* global PIXI */\r\nvar config = require('./config');\r\nvar IMAGES = config.images;\r\nvar DIRECTIONS = config.directions;\r\nvar FIRE_RATE = 250;\r\nvar VELOCITY = 250;\r\nvar JUMP_SPEED = 300;\r\nvar PROJECTILE_VELOCITY = VELOCITY * 2;\r\n\r\nfunction Player(game, x, y) {\r\n  this._game = game;\r\n\r\n  // The playerSprite and its settings\r\n  console.log('Loaded', 'PLAYER_'+ this._game.game.currentSelectHero);\r\n  this.sprite = game.add.sprite(x, y, IMAGES['PLAYER_'+ this._game.game.currentSelectHero]);\r\n  \r\n  //  We need to enable physics on the playerSprite\r\n  game.physics.arcade.enable(this.sprite);\r\n  this.sprite.position.y -= this.sprite.height;\r\n  this.sprite.body.setSize(32, 32, 0, this.sprite.height - 32);\r\n  game.camera.follow(this.sprite);\r\n  \r\n  //  playerSprite physics properties. Give the little guy a slight bounce.\r\n  this.sprite.body.bounce.y = 0;\r\n  this.sprite.body.gravity.y = 600;\r\n  this.sprite.body.collideWorldBounds = true;\r\n\r\n  this.direction = DIRECTIONS.LEFT;\r\n  //  Our two animations, walking left and right.\r\n  this.sprite.animations.add('left', [0, 1, 2, 3], 10, true);\r\n  this.sprite.animations.add('right', [5, 6, 7, 8], 10, true);\r\n  this.sprite.animations.add('death', [4, 9, 10, 11], 10, true);\r\n  this.sprite.animations.add('shootleft', [12], 10, true);\r\n  this.sprite.animations.add('shootright', [13], 10, true);\r\n  \r\n  this._jumpKey = game.input.keyboard.addKey(Phaser.KeyCode.X);\r\n  this._jumpKey.onDown.add(this.handleJumpKeyDown, this);\r\n  this._jumpKey.onUp.add(this.handleJumpKeyUp, this);\r\n  \r\n  this._shootKey = game.input.keyboard.addKey(Phaser.KeyCode.Z);\r\n  this._shootKey.onDown.add(this.handleShootKeyDown, this);\r\n  this._shootKey.onUp.add(this.handleShootKeyUp, this);\r\n  \r\n  this._leftKey = game.input.keyboard.addKey(Phaser.KeyCode.LEFT);\r\n  this._rightKey = game.input.keyboard.addKey(Phaser.KeyCode.RIGHT);\r\n  //  Stop the following keys from propagating up to the browser\r\n  game.input.keyboard.addKeyCapture([ Phaser.Keyboard.LEFT, Phaser.Keyboard.RIGHT ]);\r\n  \r\n  this._1Key = game.input.keyboard.addKey(Phaser.KeyCode.ONE);\r\n  this._2Key = game.input.keyboard.addKey(Phaser.KeyCode.TWO);\r\n  this._3Key = game.input.keyboard.addKey(Phaser.KeyCode.THREE);\r\n  this._4Key = game.input.keyboard.addKey(Phaser.KeyCode.FOUR);\r\n\r\n  this.projectilesGroup = game.add.group();\r\n  this.projectilesGroup.enableBody = true;\r\n  this.projectilesGroup.physicsBodyType = Phaser.Physics.ARCADE;\r\n  this.projectilesGroup.createMultiple(5, IMAGES.PROJECTILE);\r\n  this.projectilesGroup.setAll('anchor.x', 0.5);\r\n  this.projectilesGroup.setAll('anchor.y', 0.5);\r\n  this._nextFire = 0;\r\n}\r\n\r\nPlayer.prototype = {\r\n  update: function() {\r\n  \r\n    //  Reset the players velocity (movement)\r\n    this.sprite.body.velocity.x = 0;\r\n\r\n    if (this._leftKey.isDown) {\r\n      //  Move to the left\r\n      this.sprite.body.velocity.x = -VELOCITY;\r\n      this.sprite.animations.play('left');\r\n      this.direction = DIRECTIONS.LEFT;\r\n    } else if (this._rightKey.isDown) {\r\n      //  Move to the right\r\n      this.sprite.body.velocity.x = VELOCITY;\r\n      this.sprite.animations.play('right');\r\n      this.direction = DIRECTIONS.RIGHT;\r\n    } else {\r\n      //  Stand still\r\n      this.sprite.animations.stop();\r\n      this.sprite.frame = 4;\r\n    }\r\n    \r\n    \r\n    if (this.sprite.body.onFloor()) {\r\n      this._jumps = 2;\r\n    }\r\n    \r\n    if (this._jumps > 0 && this._makeJump) {\r\n      this.sprite.body.velocity.y = -JUMP_SPEED;\r\n      this._makeJump = false;\r\n      this._jumps--;\r\n    }\r\n    \r\n    if (this._makeShoot && this._game.time.now > this._nextFire && this.projectilesGroup.countDead() > 0) {\r\n      this._nextFire = this._game.time.now + FIRE_RATE;\r\n\r\n      var projectile = this.projectilesGroup.getFirstDead();\r\n\r\n      projectile.reset(this.sprite.position.x + this.sprite.width/2, this.sprite.position.y + this.sprite.height/2);\r\n      if (this.direction === DIRECTIONS.RIGHT) {\r\n        projectile.body.velocity.x = PROJECTILE_VELOCITY;\r\n      } else {\r\n        projectile.body.velocity.x = -PROJECTILE_VELOCITY;        \r\n      }\r\n    //  Allow the player to jump if they are touching the ground.\r\n    }\r\n    \r\n    var cameraView = this._game.world.camera.view;\r\n    this.projectilesGroup.children.forEach(function(projectile) {\r\n      if (projectile.alive && !cameraView.intersects(projectile)) {\r\n        projectile.kill();\r\n      }\r\n      projectile.rotation += 0.25;\r\n    });\r\n    \r\n    if (this._1Key.isDown) {\r\n      this.sprite.loadTexture(IMAGES.PLAYER_1, this.sprite.frame);\r\n    }\r\n    if (this._2Key.isDown) {\r\n      this.sprite.loadTexture(IMAGES.PLAYER_2, this.sprite.frame);\r\n    }\r\n    if (this._3Key.isDown) {\r\n      this.sprite.loadTexture(IMAGES.PLAYER_3, this.sprite.frame);\r\n    }\r\n    if (this._4Key.isDown) {\r\n      this.sprite.loadTexture(IMAGES.PLAYER_4, this.sprite.frame);\r\n    }\r\n  },\r\n  handleJumpKeyDown : function() {\r\n    this._makeJump = true;\r\n  },\r\n  handleJumpKeyUp : function() {\r\n    this._makeJump = false;\r\n  },\r\n  handleShootKeyDown : function() {\r\n    this._makeShoot = true;\r\n  },\r\n  handleShootKeyUp : function(){\r\n    this._makeShoot = false;\r\n  }\r\n};\r\n\r\nmodule.exports = Player;\r\n","/* global Phaser */\r\nvar path = '../../assets/images/';\r\n\r\nfunction Boot (game){};\r\n\r\nBoot.prototype = {\r\n\tpreload: function(){\r\n\t\t// preload the loading indicator first before anything else\r\n\t\tthis.load.image('preloaderBar', path + 'loading-bar.png');\r\n\t},\r\n\tcreate: function(){\r\n\t\t// set scale options\r\n\t\t// this.input.maxPointers = 1;\r\n\t\tthis.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;\r\n\t\tthis.scale.pageAlignHorizontally = true;\r\n\t\tthis.scale.pageAlignVertically = true;\r\n\t\t// start the Preloader state\r\n\t\tthis.state.start('MainMenu');\r\n\t}\r\n};\r\n\r\nmodule.exports = Boot;","module.exports = MainMenu;\r\nfunction MainMenu(game){\r\n};\r\nvar nBack_frames =  0;\r\nvar style = { font: \"bold 32px Arial\", fill: \"#ecf0f1\", boundsAlignH: \"center\", boundsAlignV: \"middle\" };\r\nvar selectedStyle = { font: \"bold 32px Arial\", fill: \"#ff3333\", boundsAlignH: \"center\", boundsAlignV: \"middle\" };\r\nvar currentlySelected = -1;\r\nvar menuTexts = [];\r\nMainMenu.prototype = {\r\n    preload: function() {\r\n\r\n    },\r\n\r\n    create: function() {\r\n\r\n        this._upKey = this.game.input.keyboard.addKey(Phaser.Keyboard.UP);\r\n        this._downKey = this.game.input.keyboard.addKey(Phaser.Keyboard.DOWN);\r\n        this._acceptKey = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);\r\n        this._downKey.onDown.add(this.changeMenuPos, this);\r\n        this._upKey.onDown.add(this.changeMenuPos, this);\r\n        this._acceptKey.onDown.add(this.changeMenuPos, this);\r\n\r\n        //Defined Menu\r\n        var menu = [\r\n            ['Start', 250, this.openPlayerSelection],\r\n            ['Tablica wyników', 290, this.openScoreBoard],\r\n            ['Twórcy', 330, this.openCredits],\r\n            ['Wyjście', 370, function(){}]\r\n        ];\r\n\r\n        this.game.add.text(this.game.world.centerX,  100 , \"PoliticAmsi\" ,{ font: \"bold 80px Arial\", fill: \"#2c3e50\", boundsAlignH: \"center\", boundsAlignV: \"middle\" }\r\n        ).anchor.set(0.5);;\r\n\r\n        this.game.stage.backgroundColor = '#1abc9c';\r\n        for(var menuPos in menu){\r\n            if(menu.hasOwnProperty(menuPos)){\r\n                var mn = menu[menuPos],\r\n                    textbox = this.game.add.text(this.game.world.centerX,mn[1], mn[0],  style);\r\n                textbox.inputEnabled = true;\r\n                textbox.events.onInputDown.add(mn[2], this);\r\n                textbox.input.useHandCursor = true;\r\n                textbox.anchor.set(0.5);\r\n                menuTexts.push(textbox);\r\n                currentlySelected = -1;\r\n            }\r\n        }\r\n\r\n        menuTexts[0].setStyle(selectedStyle);\r\n        currentlySelected = 0;\r\n\r\n    },\r\n\r\n    changeMenuPos: function(){\r\n        if (this._upKey.isDown) {\r\n            menuTexts[currentlySelected].setStyle(style);\r\n            currentlySelected = currentlySelected == 0 ? menuTexts.length - 1  : currentlySelected - 1  ;\r\n            menuTexts[currentlySelected].setStyle(selectedStyle);\r\n\r\n        } else if (this._downKey.isDown) {\r\n            menuTexts[currentlySelected].setStyle(style);\r\n            currentlySelected = currentlySelected +1 >= menuTexts.length ? 0 : currentlySelected + 1  ;\r\n            menuTexts[currentlySelected].setStyle(selectedStyle);\r\n        } else if (this._acceptKey.isDown) {\r\n            menuTexts[currentlySelected].events.onInputDown.dispatch();\r\n        }\r\n    },\r\n\r\n    openPlayerSelection : function(){\r\n        this.game.state.start('PlayerSelection');\r\n    },\r\n    openScoreBoard : function(){\r\n\r\n    },\r\n    openCredits : function(){\r\n\r\n    }\r\n};","module.exports = PlayerSelection;\r\n\r\nvar IMAGES = require('./../config').images;\r\nvar path = '../../assets/images/';\r\nvar borderSprite, playerTab, currentPosX = 0, currentPosY = 0;\r\nvar sizeAvatar = 150;\r\n\r\nfunction PlayerSelection(game){\r\n\r\n};\r\n\r\nPlayerSelection.prototype = {\r\n    preload: function() {\r\n        this.load.spritesheet(IMAGES.PLAYER_1_AV, path + 'PlayerAvatars/player_1.png', sizeAvatar, sizeAvatar);\r\n        this.load.spritesheet(IMAGES.PLAYER_2_AV, path + 'PlayerAvatars/player_2.png', sizeAvatar, sizeAvatar);\r\n        this.load.spritesheet(IMAGES.PLAYER_3_AV, path + 'PlayerAvatars/player_3.png', sizeAvatar, sizeAvatar);\r\n        this.load.spritesheet(IMAGES.PLAYER_4_AV, path + 'PlayerAvatars/player_4.png', sizeAvatar, sizeAvatar);\r\n\r\n    },\r\n    create: function() {\r\n        var self = this;\r\n        this.game.stage.backgroundColor = '#1abc9c';\r\n        this.game.add.text(this.game.world.centerX,  60 , \"Wybierz bohatera\" ,{ font: \"bold 30px Arial\", fill: \"ecf0f1\", boundsAlignH: \"center\", boundsAlignV: \"middle\" }\r\n        ).anchor.set(0.5);;\r\n\r\n\r\n        this._upKey = this.game.input.keyboard.addKey(Phaser.Keyboard.UP);\r\n        this._downKey = this.game.input.keyboard.addKey(Phaser.Keyboard.DOWN);\r\n        this._leftKey = this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT);\r\n        this._rightKey = this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT);\r\n        this._acceptKey = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);\r\n        this._downKey.onDown.add(this.changeMenuPos, this);\r\n        this._upKey.onDown.add(this.changeMenuPos, this);\r\n        this._rightKey.onDown.add(this.changeMenuPos, this);\r\n        this._leftKey.onDown.add(this.changeMenuPos, this);\r\n        this._acceptKey.onDown.add(this.changeMenuPos, this);\r\n\r\n        playerTab = [\r\n            [1,3],\r\n            [2,4]\r\n        ];\r\n\r\n        borderSprite = this.game.add.graphics( 166 , 96 );\r\n        borderSprite.beginFill(0xFF3333, 1);\r\n        borderSprite.bounds = new PIXI.Rectangle(0, 0, sizeAvatar + 8, sizeAvatar + 8 );\r\n        borderSprite.drawRect(0, 0, sizeAvatar + 8, sizeAvatar + 8);\r\n\r\n        for(var row = 0; row < playerTab.length; row++){\r\n            for(var col = 0; col < playerTab[row].length; col++){\r\n                var sprite = this.game.add.sprite(col*(sizeAvatar+20) + 170, row*(sizeAvatar+20) + 100, IMAGES['PLAYER_' + playerTab[row][col] + '_AV']);\r\n                sprite.inputEnabled = true;\r\n                sprite.input.useHandCursor = true;\r\n                sprite.champSelectedY = col;\r\n                sprite.champSelectedX = row;\r\n                sprite.events.onInputDown.add(this.clickPlayer, this);\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    },\r\n    changeMenuPos: function(){\r\n        if (this._upKey.isDown) {\r\n            currentPosY = 0 <= currentPosY - 1 ? currentPosY - 1: playerTab.length - 1;\r\n        } else if (this._downKey.isDown) {\r\n            currentPosY = playerTab.length > currentPosY + 1 ? currentPosY + 1 : 0;\r\n        } else if (this._leftKey.isDown) {\r\n            currentPosX = 0 <= currentPosX - 1 ? currentPosX - 1: playerTab[currentPosY].length - 1;\r\n        } else if (this._rightKey.isDown) {\r\n            currentPosX = playerTab[currentPosY].length > currentPosX + 1 ? currentPosX + 1: 0;\r\n        }\r\n        else if (this._acceptKey.isDown) {\r\n            this.loadGame();\r\n        }\r\n        this.setNewPosition();\r\n    },\r\n\r\n    setNewPosition : function(){\r\n        borderSprite.x = currentPosX *(sizeAvatar+20) + 166;\r\n        borderSprite.y = currentPosY *(sizeAvatar+20) + 96;\r\n    },\r\n\r\n    update: function() {\r\n\r\n    },\r\n    clickPlayer : function(spriteE){\r\n        currentPosX = spriteE.champSelectedX;\r\n        currentPosY = spriteE.champSelectedY;\r\n        this.setNewPosition();\r\n        this.loadGame();\r\n\r\n    },\r\n    loadGame : function(){\r\n        this.game.currentSelectHero = playerTab[currentPosY][currentPosX];\r\n        this.game.state.start('Preloader');\r\n    }\r\n};","/* global PIXI */\r\n/* global Phaser */\r\nvar IMAGES = require('./../config').images;\r\nvar path = '../../assets/images/';\r\n\r\nvar GAME_WIDTH = exports.GAME_WIDTH = 640;\r\nvar GAME_HEIGHT = exports.GAME_HEIGHT = 960;\r\n\r\nmodule.exports = Preloader; \r\n\r\nfunction Preloader(game){\r\n};\r\n\r\nPreloader.prototype = {\r\n\tpreload: function() {\r\n    \r\n\t\t// set background color and preload image\r\n\t\tthis.stage.backgroundColor = '#B4D9E7';\r\n\t\tthis.preloadBar = this.add.sprite((GAME_WIDTH-311)/2, (GAME_HEIGHT-27)/2, 'preloaderBar');\r\n\t\tthis.load.setPreloadSprite(this.preloadBar);\r\n    \r\n\r\n    this.load.image(IMAGES.SKY, path + 'sky.png');\r\n    this.load.image(IMAGES.GROUND, path + 'platform.png');\r\n    \r\n    this.load.spritesheet(IMAGES.PLAYER_1, path + 'wippler.png', 32, 48);\r\n    this.load.spritesheet(IMAGES.PLAYER_2, path + 'braun.png', 32, 48);\r\n    this.load.spritesheet(IMAGES.PLAYER_3, path + 'macierewicz.png', 32, 48);\r\n    this.load.spritesheet(IMAGES.PLAYER_4, path + 'liroy.png', 32, 48);\r\n    \r\n    this.load.image(IMAGES.PROJECTILE, path + 'projectile.png');\r\n    this.load.image(IMAGES.STAR, path + 'glos.png');\r\n    this.load.spritesheet(IMAGES.ENEMY, path + 'farmer.png', 60, 48);\r\n    this.load.image(IMAGES.FIREBALL, path + 'fireball.png');\r\n\r\n      \r\n    this.load.tilemap('level1', './../../assets/mapa-wies/mapa-wies.json', null, Phaser.Tilemap.TILED_JSON);\r\n\r\n    //  Next we load the tileset. This is just an image, loaded in via the normal way we load images:\r\n    this.load.image('tiles', './../../assets/mapa-wies/tileset.png');\r\n    this.load.image('tiles-props', './../../assets/images/tiles-props.png');\r\n    this.load.image('background', './../../assets/mapa-wies/wies-tlo.png');\r\n    \r\n\t},\r\n\tcreate: function(){\r\n\t\t// start the MainMenu state\r\n\t\tthis.state.start('Level1');\r\n\t}\r\n};"]}